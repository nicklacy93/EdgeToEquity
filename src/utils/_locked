export async function sendToClaude(prompt: string) {
  const url = "https://openrouter.ai/api/v1/chat/completions";

  const payload = {
    model: "anthropic/claude-3-sonnet",
    messages: [{ role: "user", content: prompt }],
  };

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer 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`,
        "HTTP-Referer": "https://edge2equity.ai",
        "X-Title": "EdgeToEquity Chat",
      },
      body: JSON.stringify(payload),
    });

    const data = await response.json();
    console.log("üß† Claude raw response:", data);

    const content =
      data?.choices?.[0]?.message?.content ||
      data?.choices?.[0]?.content ||
      JSON.stringify(data);

    return content;
  } catch (error: any) {
    console.error("‚ùå Claude API error:", error?.message || error);
    throw new Error("Claude failed to respond.");
  }
}

export async function sendToOpenAI(prompt: string) {
  const url = "https://openrouter.ai/api/v1/chat/completions";

  const payload = {
    model: "openai/gpt-4", // ‚úÖ OpenAI via OpenRouter
    messages: [{ role: "user", content: prompt }],
  };

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.NEXT_PUBLIC_OPENROUTER_API_KEY}`, // ‚úÖ Now works
        "HTTP-Referer": "https://edge2equity.ai",
        "X-Title": "EdgeToEquity Chat",
      },
      body: JSON.stringify(payload),
    });

    const data = await response.json();
    console.log("ü§ñ OpenAI (via OpenRouter) raw response:", data);

    const content =
      data?.choices?.[0]?.message?.content ||
      data?.choices?.[0]?.content ||
      JSON.stringify(data);

    return content;
  } catch (error: any) {
    console.error("‚ùå OpenAI API error (via OpenRouter):", error?.message || error);
    throw new Error("OpenAI (via OpenRouter) failed to respond.");
  }
}

import { sendToClaude } from "./sendToClaude";
import { sendToOpenAI } from "./sendToOpenAI";

interface AIResponse {
  success: boolean;
  message: string;
  provider: "Claude" | "OpenAI";
}

const agentToProvider: Record<string, "Claude" | "OpenAI"> = {
  strategy: "OpenAI",
  debug: "OpenAI",
  psychology: "Claude",
  general: "Claude",
  news: "Claude", // or OpenAI, up to you
};


export async function sendToAI(prompt: string, agent: string): Promise<AIResponse> {
  const provider = agentToProvider[agent] || "OpenAI";
  console.log("üß† Agent selected:", agent);
  console.log("üì° Routed to:", provider);

  try {
    const message =
      provider === "Claude"
        ? await sendToClaude(prompt)
        : await sendToOpenAI(prompt);

    return {
      success: true,
      message,
      provider,
    };
  } catch (error: any) {
    console.error("‚ùå AI Routing Error:", error?.message || error);
    return {
      success: false,
      message: "AI failed to respond.",
      provider,
    };
  }
}
