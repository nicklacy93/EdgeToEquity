'use client';
import { useEffect, useRef, useState } from 'react';
import { useEmotionalState } from '@/hooks/useEmotionalState';
import { coachingTriggers } from '@/data/coachingTriggers';
import { getRandomNudge } from '@/lib/chatUtils';

let lastNudgeTime = 0;

function useProactiveCoaching(mood: string, setMessages: any) {
  useEffect(() => {
    if (!mood || mood === 'neutral') return;
    const now = Date.now();
    const MIN_NUDGE_INTERVAL = 10 * 60 * 1000; // 10 minutes

    if (now - lastNudgeTime < MIN_NUDGE_INTERVAL) return;

    const nudge = getRandomNudge(mood as keyof typeof coachingTriggers);
    setMessages((prev: any) => [
      ...prev,
      { id: Date.now().toString(), role: 'bot', content: nudge }
    ]);
    lastNudgeTime = now;
  }, [mood]);
}

import { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import TypingBubble from './TypingBubble';
import BookmarkIcon from './BookmarkIcon';
import { useBookmarks } from '@/hooks/useBookmarks';
import ContextSidebar from './ContextSidebar';

interface ChatMessage {
  id: string;
  role: 'user' | 'bot';
  content: string;
  provider?: 'Claude' | 'OpenAI';
}

export default function EdgeBotChat() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [selectedAgent, setSelectedAgent] = useState<'strategy' | 'debug' | 'psychology'>('strategy');
  const { toggleBookmark, isBookmarked } = useBookmarks();
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSubmit = async () => {
    if (!input.trim()) return;
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
    };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const url = `/api/agent/${selectedAgent}`;
      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt: userMessage.content })
      });
      const data = await res.json();

      const botMessage: ChatMessage = {
        id: Date.now().toString() + '-bot',
        role: 'bot',
        content: data.result || data.content || 'No response.',
        provider: data.model_used?.includes('claude') ? 'Claude' : 'OpenAI',
      };
      setMessages(prev => [...prev, botMessage]);
    } catch (err) {
      setMessages(prev => [...prev, {
        id: Date.now().toString() + '-err',
        role: 'bot',
        content: 'Error fetching response.',
      }]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex h-full">
      <ContextSidebar />
      <div className="flex flex-col w-full h-full">
        <div ref={containerRef} className="flex-1 overflow-y-auto p-4 space-y-2">
          {messages.map(msg => (
            <motion.div
              key={msg.id}
              className={`rounded-lg p-3 max-w-xl ${msg.role === 'user' ? 'bg-purple-600 text-white ml-auto' : 'bg-gray-200 text-black mr-auto'}`}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.2 }}
            >
              {msg.content}
            </motion.div>
          ))}
          {loading && <TypingBubble />}
        </div>
        <div className="p-4 border-t flex gap-2">
          <select
            value={selectedAgent}
            onChange={(e) => setSelectedAgent(e.target.value as any)}
            className="rounded border px-2"
          >
            <option value="strategy">Strategy</option>
            <option value="debug">Debug</option>
            <option value="psychology">Psychology</option>
          </select>
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleSubmit()}
            className="flex-1 border rounded px-3 py-2"
            placeholder="Ask EdgeBot..."
          />
          <button
            onClick={handleSubmit}
            className="bg-purple-600 text-white px-4 py-2 rounded"
            disabled={loading}
          >
            Send
          </button>
        </div>
      </div>
    </div>
  );
}
